O cÃ³digo original tinha alguns problemas: A variÃ¡vel rotation3D nÃ£o foi 
inicializada corretamente e os valores das variÃ¡veis rows e cols foram atribuÃ­dos 
tarde demais. TambÃ©m nÃ£o havia memÃ³ria alocada para o array 2D data de rotation3D, 
a memÃ³ria alocada nÃ£o foi liberada adequadamente no final do programa e 
a variÃ¡vel text nÃ£o era usada.

Para corrigir esses problemas no cÃ³digo, a variÃ¡vel rotation3D foi declarada como 
um ponteiro para a struct Matrix e inicializada com o valor 0. Os valores de rows e 
cols foram atribuÃ­dos antes de serem acessados. Foi alocada memÃ³ria dinamicamente para 
o campo data de rotation3D usando malloc. No final do programa, a variÃ¡vel text foi 
removida e a memÃ³ria alocada foi liberada chamando free(rotation3D->data) e free(rotation3D).

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SCRIPT ANTES DA CORREÃ‡ÃƒO

Script started on Wed Apr  5 23:32:52 2023
[1m[7m%[27m[1m[0m                                                                                                                           
 

[0m[27m[24m[Jbelatavaresp@MacBook-Pro-de-Izabela Aula_Pratica_3_ED % [K[?2004hggcc -g c4.c -o c4[?2004l

[1m[7m%[27m[1m[0m                                                                                                                           
 

[0m[27m[24m[Jbelatavaresp@MacBook-Pro-de-Izabela Aula_Pratica_3_ED % [K[?2004hllldb c4[?2004l

(lldb) target create "c4"
Current executable set to '/Users/belatavaresp/Documents/GitHub/Aula_Pratica_3_ED/c4' (x86_64).
(lldb) [1G[2m(lldb) [22m[8Gbreakpoint set --file c4.c ==[K[1G[2m(lldb) [22m[36G[K[1G[2m(lldb) [22m[35G--line 11
Breakpoint 1: where = c4`main + 15 at c4.c:14:1, address = 0x0000000100003edf
(lldb) [1G[2m(lldb) [22m[8Gbreakpoint set --file c4.c --line 11[1G[2m(lldb) [22m[44G[K[1G[2m(lldb) [22m[43G2
Breakpoint 2: where = c4`main + 15 at c4.c:14:1, address = 0x0000000100003edf
(lldb) [1G[2m(lldb) [22m[8Gbreakpoint set --file c4.c --line 12[1G[2m(lldb) [22m[44G[K[1G[2m(lldb) [22m[43G4
Breakpoint 3: where = c4`main + 15 at c4.c:14:1, address = 0x0000000100003edf
(lldb) [1G[2m(lldb) [22m[8Gbreakpoint set --file c4.c --line 14[1G[2m(lldb) [22m[44G[K[1G[2m(lldb) [22m[43G5
Breakpoint 4: where = c4`main + 25 at c4.c:15:1, address = 0x0000000100003ee9
(lldb) [1G[2m(lldb) [22m[8Gbreakpoint set --file c4.c --line 15[1G[2m(lldb) [22m[44G[K[1G[2m(lldb) [22m[43G9
Breakpoint 5: where = c4`main + 135 at c4.c:19:6, address = 0x0000000100003f57
(lldb) [1G[2m(lldb) [22m[8Gbreakpoint set --file c4.c --line 19[1G[2m(lldb) [22m[44G[K[1G[2m(lldb) [22m[43G22[K[1G[2m(lldb) [22m[44G[K[1G[2m(lldb) [22m[43G[K[1G[2m(lldb) [22m[42G22
Breakpoint 6: where = c4`main + 144 at c4.c:22:6, address = 0x0000000100003f60
(lldb) [1G[2m(lldb) [22m[8Gbreakpoint set --file c4.c --line 22[1G[2m(lldb) [22m[44G[K[1G[2m(lldb) [22m[43G3
Breakpoint 7: where = c4`main + 160 at c4.c:23:6, address = 0x0000000100003f70
(lldb) [1G[2m(lldb) [22m[8Gr
Process 63798 launched: '/Users/belatavaresp/Documents/GitHub/Aula_Pratica_3_ED/c4' (x86_64)
Process 63798 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mbreakpoint 1.1 2.1 3.1[0m
    frame #0: [33m0x0000000100003edf[0m c4`main at [36mc4.c[0m:[33m14[0m:[33m1[0m
[33m  [0m 11  	  [32mchar[0m * text;
[33m  [0m 12  	  [32mstruct[0m Matrix * rotation3D;
[33m  [0m 13  	[35m//rotation3D = (struct Matrix*) malloc(sizeof(struct Matrix));[0m
[33m->[0m 14  	[4mrotation3D[0m->rows=[31m4[0m;
[33m  [0m 15  	rotation3D->cols=[31m4[0m;
[33m  [0m 16  	rotation3D->data=([32mint[0m**) malloc([32msizeof[0m([32mint[0m*)*rotation3D->rows);
[33m  [0m 17  	[32mfor[0m(i=[31m0[0m;i<rotation3D->rows;i++)
Target 0: (c4) stopped.
(lldb) [1G[2m(lldb) [22m[8Gcontinue
Process 63798 resuming
Process 63798 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mEXC_BAD_ACCESS (code=1, address=0x0)[0m
    frame #0: [33m0x0000000100003ee3[0m c4`main at [36mc4.c[0m:[33m14[0m:[33m17[0m
[33m  [0m 11  	  [32mchar[0m * text;
[33m  [0m 12  	  [32mstruct[0m Matrix * rotation3D;
[33m  [0m 13  	[35m//rotation3D = (struct Matrix*) malloc(sizeof(struct Matrix));[0m
[33m->[0m 14  	rotation3D->rows[4m=[0m[31m4[0m;
[33m  [0m 15  	rotation3D->cols=[31m4[0m;
[33m  [0m 16  	rotation3D->data=([32mint[0m**) malloc([32msizeof[0m([32mint[0m*)*rotation3D->rows);
[33m  [0m 17  	[32mfor[0m(i=[31m0[0m;i<rotation3D->rows;i++)
Target 0: (c4) stopped.
(lldb) [1G[2m(lldb) [22m[8Gcontinue
Process 63798 resuming
Process 63798 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mEXC_BAD_ACCESS (code=1, address=0x0)[0m
    frame #0: [33m0x0000000100003ee3[0m c4`main at [36mc4.c[0m:[33m14[0m:[33m17[0m
[33m  [0m 11  	  [32mchar[0m * text;
[33m  [0m 12  	  [32mstruct[0m Matrix * rotation3D;
[33m  [0m 13  	[35m//rotation3D = (struct Matrix*) malloc(sizeof(struct Matrix));[0m
[33m->[0m 14  	rotation3D->rows[4m=[0m[31m4[0m;
[33m  [0m 15  	rotation3D->cols=[31m4[0m;
[33m  [0m 16  	rotation3D->data=([32mint[0m**) malloc([32msizeof[0m([32mint[0m*)*rotation3D->rows);
[33m  [0m 17  	[32mfor[0m(i=[31m0[0m;i<rotation3D->rows;i++)
Target 0: (c4) stopped.
(lldb) [1G[2m(lldb) [22m[8Gcontinue
Process 63798 resuming
Process 63798 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mEXC_BAD_ACCESS (code=1, address=0x0)[0m
    frame #0: [33m0x0000000100003ee3[0m c4`main at [36mc4.c[0m:[33m14[0m:[33m17[0m
[33m  [0m 11  	  [32mchar[0m * text;
[33m  [0m 12  	  [32mstruct[0m Matrix * rotation3D;
[33m  [0m 13  	[35m//rotation3D = (struct Matrix*) malloc(sizeof(struct Matrix));[0m
[33m->[0m 14  	rotation3D->rows[4m=[0m[31m4[0m;
[33m  [0m 15  	rotation3D->cols=[31m4[0m;
[33m  [0m 16  	rotation3D->data=([32mint[0m**) malloc([32msizeof[0m([32mint[0m*)*rotation3D->rows);
[33m  [0m 17  	[32mfor[0m(i=[31m0[0m;i<rotation3D->rows;i++)
Target 0: (c4) stopped.
(lldb) [1G[2m(lldb) [22m[8Gnext
Process 63798 stopped
* thread #1, queue = [32m'com.apple.main-thread'[0m, stop reason = [31mEXC_BAD_ACCESS (code=1, address=0x0)[0m
    frame #0: [33m0x0000000100003ee3[0m c4`main at [36mc4.c[0m:[33m14[0m:[33m17[0m
[33m  [0m 11  	  [32mchar[0m * text;
[33m  [0m 12  	  [32mstruct[0m Matrix * rotation3D;
[33m  [0m 13  	[35m//rotation3D = (struct Matrix*) malloc(sizeof(struct Matrix));[0m
[33m->[0m 14  	rotation3D->rows[4m=[0m[31m4[0m;
[33m  [0m 15  	rotation3D->cols=[31m4[0m;
[33m  [0m 16  	rotation3D->data=([32mint[0m**) malloc([32msizeof[0m([32mint[0m*)*rotation3D->rows);
[33m  [0m 17  	[32mfor[0m(i=[31m0[0m;i<rotation3D->rows;i++)
Target 0: (c4) stopped.
(lldb) [1G[2m(lldb) [22m[8Gquit
Quitting LLDB will kill one or more processes. Do you really want to proceed: [Y/n] y
[1m[7m%[27m[1m[0m                                                                                                                           
 

[0m[27m[24m[Jbelatavaresp@MacBook-Pro-de-Izabela Aula_Pratica_3_ED % [K[?2004hlldb c4gcc -g c4.c -o c4[17Dexit             [13Dvalgrind --leak-check=full ./c3cc 4c[1C [?2004l

==63849== Memcheck, a memory error detector
==63849== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==63849== Using Valgrind-3.21.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info
==63849== Command: ./c4
==63849== 
==63849== Use of uninitialised value of size 8
==63849==    at 0x100003EE3: main (c4.c:14)
==63849== 
==63849== Invalid write of size 4
==63849==    at 0x100003EE3: main (c4.c:14)
==63849==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==63849== 
==63849== 
==63849== Process terminating with default action of signal 11 (SIGSEGV)
==63849==  Access not within mapped region at address 0x0
==63849==    at 0x100003EE3: main (c4.c:14)
==63849==  If you believe this happened as a result of a stack
==63849==  overflow in your program's main thread (unlikely but
==63849==  possible), you can try to increase the size of the
==63849==  main thread stack using the --main-stacksize= flag.
==63849==  The main thread stack size used in this run was 8388608.
==63849== 
==63849== HEAP SUMMARY:
==63849==     in use at exit: 13,963 bytes in 161 blocks
==63849==   total heap usage: 175 allocs, 14 frees, 18,707 bytes allocated
==63849== 
==63849== 2,048 bytes in 1 blocks are definitely lost in loss record 34 of 36
==63849==    at 0x100124545: malloc (in /usr/local/Cellar/valgrind/HEAD-1ab162e/libexec/valgrind/vgpreload_memcheck-amd64-darwin.so)
==63849==    by 0x100706079: objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::grow(unsigned int) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x10070600D: objc::detail::DenseSetPair<char const*>* objc::DenseMapBase<objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >, char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::InsertIntoBucketImpl<char const*>(char const* const&, char const* const&, objc::detail::DenseSetPair<char const*>*) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x100709EC1: __sel_registerName(char const*, bool, bool) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x1006F7D4B: fixupMethodList(method_list_t*, bool, bool) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x1006ED835: prepareMethodLists(objc_class*, method_list_t**, int, bool, bool) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x10070007C: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x1006FFB7B: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x1006FFB54: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x1006FFB54: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x1006FFB54: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63849==    by 0x1006EBA1E: map_images_nolock (in /usr/lib/libobjc.A.dylib)
==63849== 
==63849== LEAK SUMMARY:
==63849==    definitely lost: 2,048 bytes in 1 blocks
==63849==    indirectly lost: 0 bytes in 0 blocks
==63849==      possibly lost: 0 bytes in 0 blocks
==63849==    still reachable: 0 bytes in 0 blocks
==63849==         suppressed: 11,915 bytes in 160 blocks
==63849== 
==63849== Use --track-origins=yes to see where uninitialised values come from
==63849== For lists of detected and suppressed errors, rerun with: -s
==63849== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 7 from 7)
zsh: segmentation fault  valgrind --leak-check=full ./c4
[1m[7m%[27m[1m[0m                                                                                                                           
 

[0m[27m[24m[Jbelatavaresp@MacBook-Pro-de-Izabela Aula_Pratica_3_ED % [K[?2004hggcc -g c4coore   rreto.c -o c4c[?2004l

[1m[7m%[27m[1m[0m                                                                                                                           
 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

SCRIPT DEPOIS DA CORREÃ‡ÃƒO

[0m[27m[24m[Jbelatavaresp@MacBook-Pro-de-Izabela Aula_Pratica_3_ED % [K[?2004hllldb c4c[?2004l

(lldb) target create "c4c"
Current executable set to '/Users/belatavaresp/Documents/GitHub/Aula_Pratica_3_ED/c4c' (x86_64).
(lldb) [1G[2m(lldb) [22m[8Gr
Process 63880 launched: '/Users/belatavaresp/Documents/GitHub/Aula_Pratica_3_ED/c4c' (x86_64)
Process 63880 exited with status = 0 (0x00000000) 
(lldb) [1G[2m(lldb) [22m[8Gquit
[1m[7m%[27m[1m[0m                                                                                                                           
 

[0m[27m[24m[Jbelatavaresp@MacBook-Pro-de-Izabela Aula_Pratica_3_ED % [K[?2004hlldb c4c[8Dgcc -g c4correto.c -o c4c[25Dvalgrind --leak-check=full ./c4c[?2004l

==63891== Memcheck, a memory error detector
==63891== Copyright (C) 2002-2022, and GNU GPL'd, by Julian Seward et al.
==63891== Using Valgrind-3.21.0.GIT-lbmacos and LibVEX; rerun with -h for copyright info
==63891== Command: ./c4c
==63891== 
==63891== 
==63891== HEAP SUMMARY:
==63891==     in use at exit: 13,963 bytes in 161 blocks
==63891==   total heap usage: 181 allocs, 20 frees, 18,819 bytes allocated
==63891== 
==63891== 2,048 bytes in 1 blocks are definitely lost in loss record 34 of 36
==63891==    at 0x100124545: malloc (in /usr/local/Cellar/valgrind/HEAD-1ab162e/libexec/valgrind/vgpreload_memcheck-amd64-darwin.so)
==63891==    by 0x100706079: objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::grow(unsigned int) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x10070600D: objc::detail::DenseSetPair<char const*>* objc::DenseMapBase<objc::DenseMap<char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >, char const*, objc::detail::DenseSetEmpty, objc::DenseMapValueInfo<objc::detail::DenseSetEmpty>, objc::DenseMapInfo<char const*>, objc::detail::DenseSetPair<char const*> >::InsertIntoBucketImpl<char const*>(char const* const&, char const* const&, objc::detail::DenseSetPair<char const*>*) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x100709EC1: __sel_registerName(char const*, bool, bool) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x1006F7D4B: fixupMethodList(method_list_t*, bool, bool) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x1006ED835: prepareMethodLists(objc_class*, method_list_t**, int, bool, bool) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x10070007C: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x1006FFB7B: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x1006FFB54: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x1006FFB54: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x1006FFB54: realizeClassWithoutSwift(objc_class*, objc_class*) (in /usr/lib/libobjc.A.dylib)
==63891==    by 0x1006EBA1E: map_images_nolock (in /usr/lib/libobjc.A.dylib)
==63891== 
==63891== LEAK SUMMARY:
==63891==    definitely lost: 2,048 bytes in 1 blocks
==63891==    indirectly lost: 0 bytes in 0 blocks
==63891==      possibly lost: 0 bytes in 0 blocks
==63891==    still reachable: 0 bytes in 0 blocks
==63891==         suppressed: 11,915 bytes in 160 blocks
==63891== 
==63891== For lists of detected and suppressed errors, rerun with: -s
==63891== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 7 from 7)
[1m[7m%[27m[1m[0m                                                                                                                           
 

[0m[27m[24m[Jbelatavaresp@MacBook-Pro-de-Izabela Aula_Pratica_3_ED % [K[?2004heexit[?2004l


Script done on Wed Apr  5 23:37:04 2023
